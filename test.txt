-- let id : (A : U) -> A -> A
--      = \A x. x in
-- let const : (A B : U) -> A -> B -> A
--      = \A B x y. x in


-- Church natural numbers
-- let negbool : Two -> Two = (if f else t) in
-- let Nat : U = (Two -> Two) -> Two -> Two in
-- let ttwo : Nat =  \s z. s (s z) in
-- let five : Nat = \s z. s (s (s (s (s z)))) in-
-- let add  : Nat -> Nat -> Nat = \a b s z. a s (b s z) in
-- let mul  : Nat -> Nat -> Nat = \a b s z. a (b s) z in
-- let ten      : Nat = mul five ttwo in
-- let hundred  : Nat = mul ten ten in
-- let kz : Two -> U = (\s . if s then Nat else (Nat -> Nat -> Nat)) in
-- (kz f)

-- let Kz : U = (s : Two) -> (TyIf s, Unit , Empty) in
-- let zz : Kz = \x . if x, ttwo, add in
let neg : Two -> Two = (\s . if s, f, t) in
let mot1 : (nn : Nat) -> U = \nn . Two in
let www : Nat -> Two = \n . (ind n on mot1 base t step x on p is \x p . (neg p)) in
let mot2 : (nnn : Nat) -> U = \xy . (TyIf (www xy), Nat , Two) in
let wwww : (ns : Nat) -> (TyIf (www ns), Nat , Two) = \n . (ind n on mot2 base zero step xx on pp is (\xx pp . (if (www xx), zero, t))) in
mot2  (succ (succ zero))